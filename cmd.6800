volatile:
    防止编译器优化变量，缓存到寄存器；
    阻止编译器调整操作volatile变量的指令顺序；但是无法阻止cpu动态调度换序
-----------------------------------------
用户线程， 内核线程
    1:1 
    m:1
    m:n
-----------------------------------------
gcc hello.c
-----------------------------------------
preprocess
    cpp hello.c >hello.i
    gcc -E hello.c -o hello.i
-----------------------------------------
compile
    gcc -S hello.i -o hello.s
    gcc -S hello.c -o hello.s
-----------------------------------------
as
    as hello.s -o hello.o
    gcc -c hello.s -o hello.o
    gcc -c hello.c -o hello.o
-----------------------------------------
linker
    ld 
    符号决议
    内存分配
    重定位
-----------------------------------------
COFF 
    PE-COFF (windows)
    ELF (linux)
    ----------- 
    ELF file type
        relocate file: .o
        executale file: ls
        shared object file: .so
        core dump file: linux core-dump file 
    -----------
    file bash
    file hello.o
    file /lib/i386-linux-gnu/libz.so.1.2.8
    -----------
-----------------------------------------
executale/object 
    file formt
        FILE HEADER
        .text section
        .data section
        .bss  section
    -----------
    分为text section和 data section的优点：
        对text section的保护
        提高cpu cache hit ratio
        对text section的共享， 减少内存
-----------------------------------------
objdump -h object.file 
objdump -x -d -s object.file 
    ELF HEADER 
    .text 
    .data
    .bss
    .rodata
    .comment
    .debug
    .dynamic
    .hash
    .line
    .note
    .strtab
    .symtab
    .shstrtab
    .plt
    .got
    .init
    .fini
size object.file 
-----------------------------------------
objcopy
-----------------------------------------
__attrbute__((section("foo"))) int global = 42;
-----------------------------------------
ELF-HEADER
    readelf -h elf.file
    /usr/include/elf.h 
        Elf32_Ehdr
        Elf64_Ehdr
            e_ident: elf-magic
            e_type: 
                et_rel
                et_exec
                ec_dyn
            e_machine:
-----------------------------------------
ELF-SECTION-HEADER_TABLE
    readelf -s elf.file
    /usr/include/elf.h 
        Elf32_Shdr 
        Elf64_Shdr
            sh_type:
                SHT_NULL
                SHT_PROGBIT
                SHT_SYMTAB
                ...
            sh_flag:
                SHF_WRITE
                SHF_ALLOC
                SHF_EXECINSTR
            sh_name:
                .bss
                .comment
                .data 
                ...
            sh_link:
            sh_info:
-----------------------------------------
ELF-RELOCATION-TABLE
    .rel.text
    SHT_REL
ELF-STRING-TABLE
    .strtab, .shstrtab
-----------------------------------------
symbol name
symbol value
symbol table

nm elf.file
-----------------------------------------
ELF-SYM-TABLE
    readelf -s elf.file
    .symtab
    Elf32_Sym
    Elf64_Sym 
        st_name
        st_value
            offset
            SHN_COMMON
            virtual-addr in executale elf.file
        st_shndx
            section-indx
            special-const
                SHN_ABS
                SHN_COMMON
                SHN_UNDEF
        st_info
            type
                STB_LOCAL
                STB_GLOBAL
                STB_WEAK
            bind
                STT_NOTYPE
                STT_OBJECT
                STT_FUNC
                STT_SECTION
                STT_FILE
    -----------
    special-sym
        __executable_start
        __etext, _etext, etext
        _data,data
        _end, end,

        all are virtual-add 
-----------------------------------------
symtab collistion
    old
        _foo unix
        _foo_ wodows
    foo : gcc 
    -----------
    c++ name decoration
        _Z4funci
        _ZN1CfuncEi
        _ZN1C2C2funcEi
    c++filt symbolName
-----------------------------------------
c++ and c 
    -----------
    extern "C" 
    {
        int func(int);
        int var;
    }

    or 

    extern int func(int);
    extern int var;
    -----------
    #ifdef __cplusplus
    extern "C"
    #endif
    {
        void *memset (void *, int, size_t);
    #ifdef __cplusplus
    }
    #endif
-----------------------------------------
strong symbol
    function define
    inited-global define 
weak symbol
    not inited-global define 
modify strong-2-weak
__attrbute__((weak)) weak2 = 2
-----------
rule:
    strong symbol not allowed multi define 
    select strong symbol from strong/weak symbol
    select max-storage symbol from full weak symbols
-----------------------------------------
strong reference
    symbol-define not found, link error
weak reference
    symbol-define not found, link ok
-----------
__attrbute__((weakref)) void foo();
int main()
{
    if (foo) foo();
}
-----------------------------------------
weak-symbol and weak-ref useage:
    define weak symbol in lib, in case user-define strong-symbol
    define extended module by weak-ref
-----------------------------------------
g++ -g
    debug-section 
        DWARF
        CodeView 
-----------------------------------------
strip
-----------------------------------------
gcc -v
-lpthread
    old enougle 
-pthread
    new, -D_REENTRANT -lpthread
-----------------------------------------
gcc pthread.c -o pt 
gcc pthread.c -pthread -o pt 
-----------
gcc weak_ref.c -o weak_ref 
gcc weak_ref.c foo.c -o weak_ref
-----------------------------------------
two-pass link 
    space and addr alloc 
    symbol resolve and re-addr
----------------------------------------
ld a.o b.o -e main -o ab
-----------------------------------------
COMMON block
    no-init global var
    weak-symbol store in bss in exec0-elf file, finally 
    -----------
    no-common: this will treat weak-symbol as strong-symbol
        gcc -fno-common
        int global __attrbute__((nocommon));

-----------------------------------------
symbol process in link 
    stong-strong: error 
    strong-weak: select strong 
    weak-weak: select max-storage
-----------------------------------------
c++ related 
    dumplicated code problem:
        space waste
        addr easy error
        instructor run with low effiency
    dumplicated code generate
        template
        extern inline function 
        virtual function table 
    dumplicated code remove 
        gcc 
            link once
            .gnu.linkonce.name 
        visual c++
            COMDAT
-----------------------------------------
function-level
    priority
        decrease space-waste
    type 
        visual C++: function-level link option
        gcc: -ffunction-sections, -fdata-sections
-----------------------------------------
global constructor and desconstructor
    .ini section
    .fini section
-----------------------------------------
c++ and ABI
    ABI: application binary interface
    influence factors:
        os, type ...
    c++ ABI
        visual C++
        gcc 
-----------------------------------------
ar -t /usr/lib/i386-linux-gnu/libc.a |grep -w printf.o
objdump -t libc.a
ar -x libc.a
ld hello.o printf.o
-----------------------------------------
gcc option
    -fno-builtin
    -static
    --verbose
        cc1
        as
        collect2
            ld wrap
-----------------------------------------
link-control
    command-line args
        ld -e -o 
    store link-instructor in obj file 
        visual c++ 
    link-control script
        ld -verbose
            /usr/lib/ldscripts/elf_i386.x 
                for elf exec file 
            /usr/lib/ldscripts/elf_i386.xs 
                for elf shared lib 
        visual c++
            module-definition file 
        user-define script
            ld -T link.script
-----------------------------------------
gcc -c -fno-builtin tiny_hello_world.c
ld -static -e nomain -o tiny_hello_world tiny_hello_world.o
-----------------------------------------
ld 
ldscripts
-----------------------------------------
gcc -c -fno-builtin tiny_hello_world.c
ld -static -e nomain -T tiny_hello_world.lds -o tiny_hello_world tiny_hello_world.o
-----------------------------------------
ldscripts languge
    command 
        ENTRY(symbol)
        SARTUP(filename)
        SEARCH_DIR(path)
        INPUT(file, file)
        INCLUDE filename 
        PRROVIDE(symbol)
        SECTIONS 
        {
            secname : { contents }
        }

        contents 
            filename(sections)
-----------------------------------------
BFD (binary file descriptor library)
    lib to access obj file 
sudo apt-get install binutils-dev
-----------------------------------------
virtual-addr space
    32 os 
        linux: 
            os: 1G
            user: 3G
        windows:
            os: 2G
            user: 2G
    64 os 
-----------------------------------------
PAE:  physical address extenstion
    1995 Intel hard-ware: 32 --> 36
    windows-map
        linux 
            mmap
        windows
            AWE(address windowing extenstion)
-----------------------------------------
Load-method
    overlay:
        tree-type module 
        forbidden cross-tree call
    paging
        page is unit
        load-mgr
            FIFO
            LRU
-----------------------------------------
construction of process 
    create individual virtual-addr space 
    read exe-file header, create map relation between virtual-addr space and exe-file
        linux 
            VMA: virtual memory area 
        windows
            virtual section 
    set cpu esp to main-entry of exe-file
-----------------------------------------
page fault 
    exe-file  ---VMA---> virtual-addr space  ---MMU----> physical memory
-----------------------------------------
elf-link view
    section 
elf-load view 
    segment
        make simlilar section map to virtual-addr totgather
        section type 
            read only
                
            read/wite 
                .bss
            executale section 
                .text 
-----------------------------------------
program header table （程序表头）
    used for segment dispritation
    ELF23_Phdr
    readelf -l  file.elf 

-----------------------------------------
process heap/stack
    presented by VMA in virtual-addr space 
    cat /proc/pid/maps 
        VMA authority:
            R,
            W
            X,
            P(copy-on-write)
    anonymous VMA (virtual-memory-area)
        for heap and stack 
    vdso (VMA)
        for kernel
-----------------------------------------
type of VMA 
    code VMA 
        RX
    data VMA
        RWX
    heap VMA
        RWX
        anonymous
        extended to low-addr
    stack VMA
        RW
        anonymous
        extended to high-addr 
-----------------------------------------
virtual-addr from low to high 
    CODE-VMA, DTAT-VMA, HEAP-VMA, STACK-VMA, OS 
-----------------------------------------
max-heap-size for 32-bit OS 
    linux 
        user-space: 3G 
        max-heap: 2.9G
    windows
        user-space: 2G 
        max-heap: 1.5G
    -----------
    factors which influence heap-size 
        OS type;
        elf-exc file size;
        so lib;
        and ...
-----------------------------------------
segment allign
    unix
        let neighbour segment share same Page for saving memory
-----------------------------------------
linux kernel loading elf-exc file 
    check elf-magic
    check .interp, set dynamic-lib path 
    elf-exc maping, by program-header
    init elf process-evn
    modify the return-addr to elf-main-entry
-----------------------------------------
static link 
    weakness
        waste of disk and memory 
        program update/deployment/release
-----------
dynamic link
    make the link-operation to delay in run-time
    advantage
        save of disk and memory
        easy for update/deployment/release
        easy for program-entend(plug-in)
        easy for program-compatibility
    weakness
        interface-UN-compatibility, known as "DLL HELL"
-----------------------------------------
dynamic-link implement
    seperate program to some individual module, and delay link in run-time
    -----------
    linux 
        dynamic-shared-object (DSO)
        .so
            libc.so 
    windows
        dynamic-link-library (DLL)
        .dll
    -----------
    dynamic-link tool 
    lazy-binding
        5% loss of effiency
    -----------
-----------------------------------------
create .so
    gcc/g++ -fPIC -shared -o lib.so lib.c
-----------
use .so 
    gcc/g++ -o program1 program1.c ./lib.so
-----------------------------------------
ld-2.6.so
    dynamic-link tool
    -----------
    while executing program1
        dynamic-link tool does linking worl;
        then elf-exc begin run;
----------------------------------------- 
readelf -l ./lib.so 
    load-addr is 0, 
    dynamic-shared-object's load-addr is not sure
-----------------------------------------
fixed-load-addr method (static-shared-libray)
    addr-collistion
    update problem
    -----------
    only very old OS still use 
        UNIX SYSTEM V release 3.2
        old linux SYSTEM (a.out format)
        BSD/OS derivative of 4.4BSD
    -----------
-----------------------------------------
static-link
    link-time-relocation
-----------
dynamic-load
    linux 
        load-time-relocation
            can not resolve shared-code between processes
            gcc support by, -shared
    -----------        
    windows
        rebaseing
-----------
地址无关代码
    模块内部函数调用，跳转
        相对跳转和调用
    模块内部数据访问
        相对地址访问
            任意一条指令和模块内的数据都是相对的
    模块外部函数调用，跳转 
        全局偏移表 GOT（global-offset-table）
        var --> addr 
    模块外部数据访问
        全局偏移表 GOT（global-offset-table）
        function --> addr 
-----------------------------------------
objdump -h elf-file 
objdump -R elf.so
-----------------------------------------
g++/gcc 
    -fPIC 
        不同平台没有限制
    -fpic 
        不同的平台下有限制
-----------------------------------------
判断DSO是否是PIC 
    readelf -d foo.so |grep TEXTREL
    TEXTREL
        代码段重定位地址
-----------------------------------------
PIC/pie 
    代码无关可执行文件 (position independent executable)
    gcc/g++ 
        -fPIE, -fpie
-----------------------------------------
共享模块的全局变量
    编译器无法决定是模块内部的引用，还是跨模块的引用
    ELF共享库在编译的时候，默认把定义在模块内部的全局变量当作定义在其他模块的全局变量，通过GOT访问
----------------------------------------- 
共享模块数据段地址的无关性 
    load-time-relocation: R_386_RELATIVE
-----------------------------------------
gcc -shared
    weakness
        wase of memory
    advantage
        fast run-speed
-----------
gcc -shared -fPIC
    weakness
        5% loss of effiency
    advantage
        save of memory
-----------
by default, gcc use -fPIC 
-----------------------------------------
dynamic-link 
    weakness
        global-var/static-var/function using GOT to get address 
        link in run-time 
-----------
延迟绑定
    lazy-binding: 函数第一次调用才绑定
    ELF 使用 PLT(procedure linkage table) 实现
    -----------
    PLT 
        -----------
        000003f0 <bar@plt-0x10>:
         3f0:	ff b3 04 00 00 00    	pushl  0x4(%ebx)
         3f6:	ff a3 08 00 00 00    	jmp    *0x8(%ebx)
         3fc:	00 00                	add    %al,(%eax)
            ...

        00000400 <bar@plt>:
         400:	ff a3 0c 00 00 00    	jmp    *0xc(%ebx)
         406:	68 00 00 00 00       	push   $0x0
         40b:	e9 e0 ff ff ff       	jmp    3f0 <_init+0x30>
        -----------
        .got 
            for global var 
        .got.plt 
            for function call 
        -----------
-----------------------------------------
linux 
    dynamic-linker
        ld.so 
        操作系统转载完可执行文件后;动态链接器拿到控制权限，完成链接操作；交还控制权限给elf执行程序
    -----------------------------------------
    .interp 
        objdump -s |grep '\.interp' 
        readelf -A
    -----------------------------------------
-----------------------------------------
显示运行时链接
    explicit run-time linking 
    dynamic-loading-library (动态装载库)
    advantage
        flexible
        plug-in
    -----------
    <dlfcn.h>
        implement in /lib/libdl.so.2
    api
        dlopen
            path
                LD_LIBRATY_PATH
                /etc/ld.so.cache 
                /lib, /usr/lib 
            flag
                RTLD_LAZY
                    PLT 
                RTLD_NOW
                RTLD_GLOBAL
            .init 
        -----------
        dlsym
            handle 
            symbol 
            
            return 
                var addr 
                function addr 
                const 
                    objdump -t elf-file |grep ABS
            symbol priority
                load-ordering
                dependency-ordering
        -----------
        dlerror 
            null 
                succ 
        -----------
        dlclose
-----------------------------------------


